---
- hosts: all
  remote_user: k8s
  become: yes
  gather_facts: true

- hosts: haproxy
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Installation HAProxy
      apt:
        name: haproxy
        state: present
    - name: Copie de la configuration
      template:
        src: templates/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
        group: root
        mode: "0644"
    - name: Démarrage HAProxy
      service:
        name: haproxy
        state: restarted
        enabled: yes

- hosts: k8s
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Installation paquets de base
      apt:
        name:
          - apt-transport-https
          - curl
        state: latest

    - name: Commande modprobe
      shell: |
        cat <<EOF | sudo tee /etc/modules
        overlay
        br_netfilter
        EOF
        modprobe overlay
        modprobe br_netfilter

    - name: Configuration paramètre systemctl
      shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF

    - name: Ajout des clés GPG des repos
      apt_key:
        url: "{{item}}"
      loop:
        - "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{crio.os}}/Release.key"
        - "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{crio.version}}/{{crio.os}}/Release.key"
        - "https://packages.cloud.google.com/apt/doc/apt-key.gpg"

    - name: Installation repository
      apt_repository:
        repo: "{{item}}"
        state: present
      loop:
        - "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{crio.os}}/ /"
        - "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{crio.version}}/{{crio.os}}/ /"
        - "deb https://apt.kubernetes.io/ kubernetes-xenial main "

    - name: Installation cri-o et binaires kubernetes
      apt:
        name:
          - cri-o #={{crio.version}}
          - cri-o-runc #={{crio.version}}
          - kubelet #={{kubelet.version}}
          - kubeadm #={{kubelet.version}}
          - kubectl #={{kubelet.version}}
          - open-iscsi
        state: present

    - name: Marquage des paquets pour les binaires kubernetes
      dpkg_selections:
        name: "{{item}}"
        selection: hold
      loop:
        - kubeadm
        - kubelet
        - kubectl

    - name: Start crio
      service:
        name: crio
        state: started
        enabled: yes

    - name: Autoriser le démarrage au boot de kubelet
      service:
        name: kubelet
        enabled: yes

    - name: Start iSCSI
      service:
        name: iscsid
        state: started
        enabled: yes

    - name: Relancer les règles de sysctl.conf
      command: sysctl --system

- hosts: master
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: Configuration kubelet
      template:
        src: templates/kubeadm.yaml
        dest: /root/kubeadm.yaml
        group: root
        mode: "0644"

    - name: kubeadm init
      shell: kubeadm init --config /root/kubeadm.yaml --upload-certs
      register: kubeadm_out

    - name: Création du dossier .kube
      file:
        path: /root/.kube
        state: directory
        user: root
        group: root
        mode: "0700"
    - name: Copie de la config kubectl
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: "0600"

    - name: Installation de Helm
      # FixMe: C'est pas top comme méthode d'installation...
      shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      args:
        warn: no

    - name: Ajout des repos Helm
      shell: helm repo add {{ item }}
      loop:
        - stable https://charts.helm.sh/stable
        - cilium https://helm.cilium.io/
        - openebs https://openebs.github.io/charts
        - falcosecurity https://falcosecurity.github.io/charts

    - name: Mise à jours des Charts Helm
      shell: helm repo update

    - name: Installation Cilium
      shell: helm install cilium cilium/cilium --namespace {{ cilium.namespace }} --set ipam.mode={{ cilium.ipam }} --set prometheus.enable={{ cilium.agentMetrics }} --set operator.prometheus.enable={{ cilium.operatorMetrics }}

    - name: Installation OpenEBS
      shell: helm install openebs openebs/openebs --namespace openebs --set ndm.filters.includePaths="/dev/sdb" --set localprovisioner.enabled=false --snapshotOperator.enabled-false

    - debug:
        var: kubeadm_out.stdout_lines

    - name: Récupération de la commande 'kubeadm join' pour les masters
      set_fact:
        kubeadm_masters_join: "{{ kubeadm_out.stdout_lines[-8][:-2]+kubeadm_out.stdout_lines[-7] }}"

    - name: Récupération de la commande 'kubeadm join' pour les workers
      set_fact:
        kubeadm_workers_join: "{{ kubeadm_out.stdout_lines[-2][:-2]+kubeadm_out.stdout_lines[-1] }}"

    - name: Petite pause après l'initialisation du cluster...
      pause:
        seconds: "20"

- hosts: master_backup
  serial: 1 # Execute le playbook machine par machine
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: kubeadm join - control plane
      shell: "{{ hostvars[groups['master'][0]]['kubeadm_masters_join'] }}"

- hosts: workers
  serial: 1 # Execute le playbook machine par machine
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: kubeadm join - workers
      shell: "{{ hostvars[groups['master'][0]]['kubeadm_workers_join'] }}"

- hosts: master
  remote_user: k8s
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: Vérification des noeuds
      shell: kubectl get nodes
      register: nodes_check

    - debug:
        var: nodes_check.stdout_lines

    - name: Ajout des manifests de base (authentification, ...)
      shell: kubectl apply -f manifests/
